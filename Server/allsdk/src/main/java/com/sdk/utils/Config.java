package com.sdk.utils;import java.util.Locale;import java.util.ResourceBundle;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class Config {		private static Logger logger = LoggerFactory.getLogger(Config.class);	private static ResourceBundle rbOverride = null;	private static ResourceBundle rbCommon = null;	private static final Locale locale = new Locale("zh", "CN");	private static boolean isProduct = false;	private static boolean isDev = true;	private static String cachePrefix = "D_";	private static void processSystemType() {		String systemType = null;		String typeKey = "system.type";		if (rbCommon == null) {			systemType = "Dev";		}else if ((rbOverride != null) && (rbOverride.containsKey(typeKey)))			systemType = rbOverride.getString(typeKey);		else if (rbCommon.containsKey(typeKey)) {			systemType = rbCommon.getString(typeKey);		}		if (StringUtils.isEmpty(systemType)) {			systemType = "Dev";		}		String hostName = DnsUtil.getHostName();		if (systemType.startsWith("Product")) {			isProduct = true;			isDev = false;			cachePrefix = "P_";		} else {			isProduct = false;			isDev = true;			cachePrefix = "D_";		}		logger.warn("SystemConfig: isProduct=" + isProduct + ", isDev=" + isDev + ", cachePrefix=" + cachePrefix + ", hostName=" + hostName + ", systemType=" + systemType);	}	@Deprecated	public static String getItem(String item, String defaultValue) {		String value = getItem(item);		if ((value == null) && (defaultValue != null)) {			logger.warn("config property:" + item + " haven't been configed!, but has defaultValue: " + defaultValue + " please take care!!");			value = defaultValue;		}		return value;	}	public static String getItem(String item) throws RuntimeException {		String value = null;		if (StringUtils.isBlank(item)) {			return null;		}		String key = item.trim();		if (rbCommon != null) {			try {				if ((rbOverride != null) && (rbOverride.containsKey(key)) && (rbCommon.containsKey(key))) {					value = rbOverride.getString(key);				}				if ((rbOverride != null) && (rbOverride.containsKey(key)) && (!rbCommon.containsKey(key))) {					String msg = "config parameter " + key + " is configed in common file, but not configed in override file";					logger.warn(msg);					RuntimeException e = new RuntimeException(msg);					throw e;				}				if ((value == null) && (rbCommon.containsKey(key)))					value = rbCommon.getString(key);			} catch (Exception e) {				logger.error("get config parameter " + key + " error: ", e);			}		}		value = StringUtils.trim(value);		if (value == null) {			logger.warn("Item " + item + " is not configed!! please take care!!");		} else if ("".equals(value)) {			logger.warn("Item " + item + " is configed, but the value is empty!! please take care!!");		}		return value;	}	public static int getInt(String item, String defaultValue) {		int i = 0;		String value = getItem(item, defaultValue);		try {			i = Integer.parseInt(value);		} catch (NumberFormatException e) {			logger.error("item=" + item + ", defaultValue=" + defaultValue, e);		}		return i;	}	public static long getLong(String item, long defaultValue) {		long i = 0;		String value = getItem(item, String.valueOf(defaultValue));		try {			i = Long.parseLong(value);		} catch (NumberFormatException e) {			logger.error("item=" + item + ", defaultValue=" + defaultValue, e);		}		return i;	}	public static boolean getBooleanItem(String item, boolean defaultValue) {		boolean b = false;		String value = getItem(item, Boolean.valueOf(defaultValue).toString());		if ((value != null) && (value.equalsIgnoreCase("true"))) {			b = true;		}		return b;	}	public static boolean isProduct() {		return isProduct;	}	public static boolean isDev() {		return isDev;	}	public static String getCachePrefix() {		return cachePrefix;	}	static {		try {			rbCommon = ResourceBundle.getBundle("config-common", locale);		} catch (Exception e) {			logger.error("error", e);		}		try {			rbOverride = ResourceBundle.getBundle("config-override", locale);		} catch (Exception e) {			logger.info("product profile doesn't have override config file! other profile must have override config file! please take care!!!");		}		processSystemType();	}}
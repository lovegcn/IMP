package com.sdk.utils;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.Map;import java.util.Timer;import java.util.TimerTask;import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;import org.apache.commons.httpclient.HttpClient;import org.apache.commons.httpclient.HttpMethod;import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;import org.apache.commons.httpclient.URIException;import org.apache.commons.httpclient.methods.GetMethod;import org.apache.commons.httpclient.methods.PostMethod;import org.apache.commons.httpclient.methods.StringRequestEntity;import org.apache.commons.httpclient.params.HttpMethodParams;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class HttpUtil {    private static final Logger logger = LoggerFactory.getLogger(HttpUtil.class);    private static HttpClient client = new HttpClient(new MultiThreadedHttpConnectionManager());    private static final int FAST_MODE_TIMEOUT = 10000;    private static final int NORMAL_MODE_TIMEOUT = 20000;    private static final int NORMAL_MODE_RETRY_TIMES = 3;    private static final int FORCE_TIMEOUT_DELAY = 10000;    static {        client.getHttpConnectionManager().getParams().setConnectionTimeout(15000);    }    private static void setMethodTimeout(final HttpMethod method, boolean fastMode) {        setMethodTimeout(method, fastMode, false);    }    private static Timer setMethodTimeout(final HttpMethod method, boolean fastMode, boolean forceTimeout) {        Timer timer = null;        int forceTimeoutTime = 0;        if (fastMode) {            method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler() {                public boolean retryMethod(HttpMethod method, IOException exception, int executionCount) {                    return false;                }            });            method.getParams().setSoTimeout(FAST_MODE_TIMEOUT);            forceTimeoutTime = FAST_MODE_TIMEOUT + FORCE_TIMEOUT_DELAY;        } else {            method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler() {                public boolean retryMethod(HttpMethod method, IOException exception, int executionCount) {                    return executionCount < NORMAL_MODE_RETRY_TIMES;                }            });            method.getParams().setSoTimeout(NORMAL_MODE_TIMEOUT);            forceTimeoutTime = NORMAL_MODE_TIMEOUT * NORMAL_MODE_RETRY_TIMES + FORCE_TIMEOUT_DELAY;        }        if (forceTimeout) {            timer = new Timer();            timer.schedule(new TimerTask() {                @Override                public void run() {                    try {                        logger.error("http request force aborted {}", method.getURI());                        method.abort();                    } catch (URIException e) {                        logger.error("",e);                    }                }            }, forceTimeoutTime);        }        return timer;    }    public static String get(String url, boolean fastMode) {        return get(url, fastMode, false);    }    public static String get(String url, boolean fastMode, boolean forceTimeout) {        GetMethod method = new GetMethod(url);        method.setFollowRedirects(true);        Timer timer = null;        try {            timer = setMethodTimeout(method, fastMode, forceTimeout);            int code = client.executeMethod(method);            if (code == 200) {                long contentLength = method.getResponseContentLength();                if (contentLength == -1)                    return method.getResponseBodyAsString(Integer.MAX_VALUE);                else                    return method.getResponseBodyAsString();            } else {                logger.warn("get url:{} return {}", url, code);            }        } catch (Exception e) {            logger.error("push fail: url=" + url, e);        } finally {            if (timer != null) {                timer.cancel();            }            method.releaseConnection();        }        return null;    }    public static String post(String url, String body, boolean fastMode) {        PostMethod method = new PostMethod(url);//		method.setFollowRedirects(true);        try {            setMethodTimeout(method, fastMode);            method.setRequestEntity(new StringRequestEntity(body, "text/xml", "UTF-8"));            int code = client.executeMethod(method);            if (code == 200) {                long contentLength = method.getResponseContentLength();                if (contentLength == -1)                    return method.getResponseBodyAsString(Integer.MAX_VALUE);                else                    return method.getResponseBodyAsString();            }        } catch (Exception e) {            logger.error("push fail: url=" + url + ", body=" + body, e);        } finally {            method.releaseConnection();        }        return null;    }    public static String getFromInputStream(String url, boolean fastMode) {        GetMethod method = new GetMethod(url);        method.setFollowRedirects(true);        try {            setMethodTimeout(method, fastMode);            int code = client.executeMethod(method);            if (code == 200) {                InputStream in = method.getResponseBodyAsStream();                InputStreamReader isr = new InputStreamReader(in, "UTF-8");                BufferedReader buffRead = new BufferedReader(isr);                StringBuffer inputLine = new StringBuffer();                String temp = null;                while ((temp = buffRead.readLine()) != null) {                    inputLine.append(temp);                }                return inputLine.toString();            } else {                logger.warn("get url:{} return {}", url, code);            }        } catch (Exception e) {            logger.error("push fail: url=" + url, e);        } finally {            method.releaseConnection();        }        return null;    }    public static String postForm(String url, String body, boolean fastMode) {        PostMethod method = new PostMethod(url);//		method.setFollowRedirects(true);        try {            method.setRequestEntity(new StringRequestEntity(body, "application/x-www-form-urlencoded", "UTF-8"));            setMethodTimeout(method, fastMode);            int code = client.executeMethod(method);            logger.info("push response code:" + code);            if (code == 200) {                InputStream in = method.getResponseBodyAsStream();                InputStreamReader isr = new InputStreamReader(in, "UTF-8");                BufferedReader buffRead = new BufferedReader(isr);                StringBuffer inputLine = new StringBuffer();                String temp = null;                while ((temp = buffRead.readLine()) != null) {                    inputLine.append(temp);                }                return inputLine.toString();            }        } catch (Exception e) {            logger.error("push fail: url=" + url + ", body=" + body, e);        } finally {            method.releaseConnection();        }        return null;    }    public static String postForm(String url, Map<String, String> params, boolean fastMode) {        PostMethod method = new PostMethod(url);        try {            setMethodTimeout(method, fastMode);            if (params != null) {                for (Map.Entry<String, String> entry : params.entrySet()) {                    method.setParameter(entry.getKey(), entry.getValue());                }                method.setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, "UTF-8");            }            int code = client.executeMethod(method);            if (code == 200) {                InputStream in = method.getResponseBodyAsStream();                InputStreamReader isr = new InputStreamReader(in, "UTF-8");                BufferedReader buffRead = new BufferedReader(isr);                StringBuffer inputLine = new StringBuffer();                String temp = null;                while ((temp = buffRead.readLine()) != null) {                    inputLine.append(temp);                }                return inputLine.toString();            }        } catch (Exception e) {            logger.error("push fail: url=" + url + ", params =" + params.toString(), e);        } finally {            method.releaseConnection();        }        return null;    }    /**     * 该方法会!!!强制设置超时40s!!!,超时会强制断开连接,目前用于统一平台超时处理.     * 使用需要谨慎!!!     * @param url     * @param body     * @param fastMode     * @return     */    public static String postJson(String url, String body, boolean fastMode) {        PostMethod method = new PostMethod(url);        try {            setMethodTimeout(method, fastMode,true);            method.setRequestEntity(new StringRequestEntity(body, "application/json", "UTF-8"));            int code = client.executeMethod(method);            if (code == 200) {                long contentLength = method.getResponseContentLength();                if (contentLength == -1)                    return method.getResponseBodyAsString(Integer.MAX_VALUE);                else                    return method.getResponseBodyAsString();            }        } catch (Exception e) {            logger.error("push fail: url=" + url + ", body=" + body, e);        } finally {            method.releaseConnection();        }        return null;    }}